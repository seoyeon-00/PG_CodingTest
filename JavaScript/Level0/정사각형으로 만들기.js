/*
[문제]
이차원 정수 배열 arr이 매개변수로 주어집니다. 
arr의 행의 수가 더 많다면 열의 수가 행의 수와 같아지도록 각 행의 끝에 0을 추가하고, 
열의 수가 더 많다면 행의 수가 열의 수와 같아지도록 각 열의 끝에 0을 추가한 
이차원 배열을 return 하는 solution 함수를 작성해 주세요.

[제한사항]
1 ≤ arr의 길이 ≤ 100
1 ≤ arr의 원소의 길이 ≤ 100
arr의 모든 원소의 길이는 같습니다.
1 ≤ arr의 원소의 원소 ≤ 1,000

[입출력 예]
|               arr                 |                  result                  |
|-----------------------------------|------------------------------------------|
| [[572, 22, 37], [287, 726, 384],  |  [[572, 22, 37, 0], [287, 726, 384, 0],  |
| [85, 137, 292], [487, 13, 876]]   |  [85, 137, 292, 0], [487, 13, 876, 0]]   |   
|-----------------------------------|------------------------------------------|
|        [[57, 192, 534, 2],        |  [[57, 192, 534, 2], [9, 345, 192, 999], |
|        [9, 345, 192, 999]]        |      [0, 0, 0, 0], [0, 0, 0, 0]]         |
|-----------------------------------|------------------------------------------|
|          [[1, 2], [3, 4]]         |             [[1, 2], [3, 4]]             |
|-----------------------------------|------------------------------------------|
*/

function solution(arr) {
  // 정사각형으로 만들기 위해 현재 사각형의 행, 열의 최대값을 구함
  // 행의 길이 : arr.length
  // 열의 길이 : arr[0].length
  const max = Math.max(arr.length, arr[0].length);

  // 행의 길이가 최대값보다 작을 경우
  if (arr.length < max) {
    // 추가해야할 길이를 구함
    const pushNum = max - arr.length;
    // 생성자 함수 새로운 배열 생성.
    // Array.fill() - arr[0].length 길이만큼 0으로 채움
    // Array.from() - Array.from({ length: arr[0].length }, () => 0);
    const pushItem = new Array(arr[0].length).fill(0);

    // pushNum 만큼 반복문 arr에 pushItem 추가
    for (var i = 0; i < pushNum; i++) {
      arr.push(pushItem);
    }
    // 열의 길이가 최대값보다 작을 경우
  } else if (arr[0].length < max) {
    // 추가해야할 길이를 구함
    const pushNum = max - arr[0].length;

    // pushNum 만큼 반복문 arr에 pushItem 추가
    for (var i = 0; i < pushNum; i++) {
      arr.forEach((item) => {
        // item에 0추가
        item.push(0);
      });
    }
  }

  return arr;
}
