/*
[문제]
다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 대각선 칸을 모두 위험지역으로 분류합니다.
지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 지뢰가 없는 지역 0만 존재합니다.
지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 
안전한 지역의 칸 수를 return하도록 solution 함수를 완성해주세요.

[제한사항]
- board는 n * n 배열입니다.
- 1 ≤ n ≤ 100
- 지뢰는 1로 표시되어 있습니다.
- board에는 지뢰가 있는 지역 1과 지뢰가 없는 지역 0만 존재합니다.

[입출력]
|                                              numbers                                      |  result  |
|-------------------------------------------------------------------------------------------|----------|
|   [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0]]   |    16    |
|   [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]]   |    13    |
|                 [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1],              |    0     |
|                  [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]              |          |
*/

function solution(board) {
  // 위, 아래, 좌, 우, 대각선 칸 확인을 위한 셋팅
  const directionArray = [
    [-1, -1],
    [-1, 0],
    [-1, 1],
    [0, 1],
    [1, 1],
    [1, 0],
    [1, -1],
    [0, -1],
  ];

  // 2차원 배열 순회
  for (let i = 0; i < board.length; i++) {
    for (let j = 0; j < board.length; j++) {
      // board[i][j]가 1일 경우
      if (board[i][j] === 1) {
        // 현재 좌표를 기준으로 위, 아래, 좌, 우 위험지역 표시
        for (let s = 0; s < 8; s++) {
          const [a, b] = directionArray[s];
          const [x, y] = [a + i, b + j];

          if (
            x >= 0 &&
            x < board.length &&
            y >= 0 &&
            y < board.length &&
            board[x][y] == 0
          ) {
            board[i + a][j + b] = -1;
          }
        }
      }
    }
  }

  // board에서 안전지대 개수 출력
  return [].concat(...board).filter((item) => item === 0).length;
}
