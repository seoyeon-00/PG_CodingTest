/*
[문제]
길이가 같은 두 개의 큐가 주어집니다. 하나의 큐를 골라 원소를 추출(pop)하고, 
추출된 원소를 다른 큐에 집어넣는(insert) 작업을 통해 각 큐의 원소 합이 같도록 만들려고 합니다. 
이때 필요한 작업의 최소 횟수를 구하고자 합니다. 
한 번의 pop과 한 번의 insert를 합쳐서 작업을 1회 수행한 것으로 간주합니다.

큐는 먼저 집어넣은 원소가 먼저 나오는 구조입니다. 이 문제에서는 큐를 배열로 표현하며, 
원소가 배열 앞쪽에 있을수록 먼저 집어넣은 원소임을 의미합니다. 즉, pop을 하면 배열의 첫 번째 원소가 추출되며,
insert를 하면 배열의 끝에 원소가 추가됩니다. 예를 들어 큐 [1, 2, 3, 4]가 주어졌을 때, 
pop을 하면 맨 앞에 있는 원소 1이 추출되어 [2, 3, 4]가 되며, 이어서 5를 insert하면 [2, 3, 4, 5]가 됩니다.

다음은 두 큐를 나타내는 예시입니다.

queue1 = [3, 2, 7, 2]
queue2 = [4, 6, 5, 1]

두 큐에 담긴 모든 원소의 합은 30입니다. 따라서, 각 큐의 합을 15로 만들어야 합니다. 
예를 들어, 다음과 같이 2가지 방법이 있습니다.

queue2의 4, 6, 5를 순서대로 추출하여 queue1에 추가한 뒤, queue1의 3, 2, 7, 2를 순서대로 추출하여 
queue2에 추가합니다. 그 결과 queue1은 [4, 6, 5], queue2는 [1, 3, 2, 7, 2]가 되며, 
각 큐의 원소 합은 15로 같습니다. 이 방법은 작업을 7번 수행합니다.
queue1에서 3을 추출하여 queue2에 추가합니다. 그리고 queue2에서 4를 추출하여 queue1에 추가합니다. 
그 결과 queue1은 [2, 7, 2, 4], queue2는 [6, 5, 1, 3]가 되며, 각 큐의 원소 합은 15로 같습니다. 
이 방법은 작업을 2번만 수행하며, 이보다 적은 횟수로 목표를 달성할 수 없습니다.
따라서 각 큐의 원소 합을 같게 만들기 위해 필요한 작업의 최소 횟수는 2입니다.

길이가 같은 두 개의 큐를 나타내는 정수 배열 queue1, queue2가 매개변수로 주어집니다. 
각 큐의 원소 합을 같게 만들기 위해 필요한 작업의 최소 횟수를 return 하도록 solution 함수를 완성해주세요. 
단, 어떤 방법으로도 각 큐의 원소 합을 같게 만들 수 없는 경우, -1을 return 해주세요.

[제한사항]
- 1 ≤ queue1의 길이 = queue2의 길이 ≤ 300,000
- 1 ≤ queue1의 원소, queue2의 원소 ≤ 109
주의: 언어에 따라 합 계산 과정 중 산술 오버플로우 발생 가능성이 있으므로 long type 고려가 필요합니다.

[입출력]
|       queue1       |      queue2      | result  |
|--------------------|------------------|---------|
|    [3, 2, 7, 2]	   |    [4, 6, 5, 1]  |    2    |
|    [1, 2, 1, 2]	   |   [1, 10, 1, 2]  |    7    |
|       [1, 1]	     |       [1, 5]     |    7    |

[접근 방법]
Queue 접근 방법으로 push,shift를 사용할 경우, shift 메소드는 O(n)의 복잡도를 가지므로
요소가 많은 해당 문제에서는 이 접근법으로 문제를 해결 시 "시간초과"가 발생합니다.
=> shift 사용 없이 문제를 해결해야 함

queue1과 queue2의 index를 설정하여 각 원소에 접근하여 각 큐의 합을 구하고
이동되는 값은 push하면 된다. 이후 인덱스를 증가 
최대로 반복문을 돌리는 횟수는 각 큐의 길이 합의 3배
*/

function solution(queue1, queue2) {
  let answer = 0;

  let len = queue1.length + queue2.length;
  let sumQue1 = queue1.reduce((acc, val) => acc + val, 0);
  let sumQue2 = queue2.reduce((acc, val) => acc + val, 0);
  const average = (sumQue1 + sumQue2) / 2;
  let index1 = 0,
    index2 = 0;

  // len * 3으로 설정 (무한루프에 빠지지 않도록)
  // 반복문은 두 큐의 합이 같아질 때까지 실행
  // 두 큐 중 하나의 요소를 빼서 다른 큐로 이동시키므로 한 번의 반복문 마다 큐의 길이는 늘어나게 됨
  // 반복 횟수를 충분히 많이 지정하여 두 큐가 같아질 수 있는 충분한 시간을 확보
  while (answer < len * 3) {
    if (sumQue1 > sumQue2) {
      const ele = queue1[index1++];
      sumQue1 -= ele;
      sumQue2 += ele;
      queue2.push(ele);
    } else if (sumQue1 < sumQue2) {
      const ele = queue2[index2++];
      sumQue1 += ele;
      sumQue2 -= ele;
      queue1.push(ele);
    } else {
      break;
    }
    answer++;
  }

  // 두 큐를 같게 만들 수 없는 경우
  if (sumQue1 != average) return -1;

  return answer;
}
