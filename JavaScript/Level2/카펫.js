/*
[문제]
Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고 
테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.

Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된 격자의 개수는 기억했지만, 
전체 카펫의 크기는 기억하지 못했습니다.

Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가 매개변수로 주어질 때 
카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.

[제한사항]
- 갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
- 노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.
- 카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.

[입출력]
|  brown   |  yellow |    return    |
|----------|---------|--------------|
|    10    |    2    |  	[4, 3]    |
|     8    |    1    |    [3, 3]    |
|    24    |  	24   |    [8, 6]    |
*/

function solution(brown, yellow) {
  // add의 약수를 저장
  const answer = [];

  // 브라운, 옐로우 블럭의 합
  var add = brown + yellow;

  // 1에서 add 제곱근까지 반복문 진행
  for (let i = 1; i <= Math.sqrt(add); i++) {
    // add를 i로 나누어 나머지가 0이라면
    if (add % i === 0) {
      // add를 i로 나눴을 때 몫이 i와 같지 않다면 add / i, 같다면 i를 a에 할당
      // ex) 9의 약수에서 3은 나누는 값과 몫이 같음.
      const a = add / i !== i ? add / i : i;
      // answer에 2차원 배열로 i, a 배열 추가
      answer.push([i, a]);
    }
  }

  // 브라운이 옐로우를 한줄로 감싸고 있기 때문에 가로 세로 각각 2씩 빼서 곱한 값이 yellow 개수이다.
  // (a - 2) * (b - 2) = yellow가 성립하는 width, height 값을 구해야함
  // filter로 성립하는 원소 찾은 후 2차원 배열의 0번째 원소를 출력한 후 내림차순으로 정렬후 리턴
  return answer
    .filter((item) => (item[0] - 2) * (item[1] - 2) === yellow)[0]
    .reverse();
}
