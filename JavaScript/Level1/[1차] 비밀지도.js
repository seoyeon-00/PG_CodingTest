/*
[문제]
비밀지도
네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 
그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다. 
다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.

지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 "지도 1"과 "지도 2"라고 하자.
지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 
지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
"지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 
얻어지는 이진수에 해당하는 값의 배열이다.

네오가 프로도의 비상금을 손에 넣을 수 있도록, 
비밀지도의 암호를 해독하는 작업을 도와줄 프로그램을 작성하라.

[입력 형식]
입력으로 지도의 한 변 크기 n 과 2개의 정수 배열 arr1, arr2가 들어온다.

  - 1 ≦ n ≦ 16
  - arr1, arr2는 길이 n인 정수 배열로 주어진다.
  - 정수 배열의 각 원소 x를 이진수로 변환했을 때의 길이는 n 이하이다. 즉, 0 ≦ x ≦ 2n - 1을 만족한다.

[출력 형식]
원래의 비밀지도를 해독하여 '#', 공백으로 구성된 문자열 배열로 출력하라.

[입출력]
|     n     |     arr1     |    arr2     |    result    |
|-----------|-----------|-----------|--------------|
|   5   |  [9, 20, 28, 18, 11] |  [30, 1, 21, 17, 28] |  ["#####","# # #", "### #", "# ##", "#####"] |
|   6   |  	[46, 33, 33 ,22, 31, 50] |  	[27 ,56, 19, 14, 14, 10] |  ["######", "### #", "## ##", " #### ", " #####", "### # "] |
*/

function solution(n, arr1, arr2) {
  // 빈배열 addArr => result 저장
  const addArr = [];

  // n번 arr배열 순회
  for (var i = 0; i < n; i++) {
    // toString(n) : binary 변환 10진수를 n진수로 변환
    // padStart(targetLength, str) : 목표 문자열 길이(targetLength) 만큼 str을 채워넣는다.
    var binaryArr1 = arr1[i].toString(2).padStart(n, 0);
    var binaryArr2 = arr2[i].toString(2).padStart(n, 0);

    var row = [];
    // n번 만큼 순회하여 binaryArr의 각 자리수를 더해 합이 0이면  " ", 아닐경우 "#"을 row에 저장
    for (var w = 0; w < n; w++) {
      if (Number(binaryArr1[w]) + Number(binaryArr2[w]) === 0) {
        row.push(" ");
      } else {
        row.push("#");
      }
    }
    // 배열을 문자열로 변환 후 addArr에 추가
    addArr.push(row.join(""));
  }

  return addArr;
}

// 다른사람 풀이 [비트 OR 연산자]
function solution(n, arr1, arr2) {
  // OR 논리 연산자 : 비교하는 비트 중 하나라도 1이면 1반환
  // AND 논리 연산자 : 비교하는 비트가 모두 1이면 1을 반환

  /*
  arr1 = 2 (0010)
  arr2 = 3 (0011)
  OR 연산 결과 
  (arr1 | arr2 ) = 3 (0011) 
  */
  return arr1.map((item, i) =>
    (item | arr2[i])
      .toString(2)
      .padStart(n, 0)
      .replace(/1/g, "#")
      .replace(/0/g, " ")
  );
}
