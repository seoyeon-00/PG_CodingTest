/*
[문제]
점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 
다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 
학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 
체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 
체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 
체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.

전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 
여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 
체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.

[제한사항]
- 전체 학생의 수는 2명 이상 30명 이하입니다.
- 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
- 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
- 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
- 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.

[입출력]
|   n   |    lost    |   reserve   |   return   |
|-------|------------|-------------|------------|
|   5   |   [2, 4]   |  [1, 3, 5]  |      5     |
|   5   |   [2, 4]   |	   [3]     |      4     |
|   3   |  [1, 2, 3] |	[1, 2, 3]  |      3     |
|   3   |     [3]    |	   [1]     |      2     |
|   5   |     [1]    |	   [5]     |      4     |
|   5   |   [1, 2]   |	 [2, 3]    |      4     |

-> 전체 학생수에서 체육복을 빌리지 못한 학생 수를 제거하는 방법으로 문제 풀이
-> 제한사항 5번 (* 여벌 체육복이 있는 학생이 체육복을 잃어 버린 경우에 대한 부분을 신경써서 풀이)

*/

function solution(n, lost, reserve) {
  // #정렬 : 복잡도가 O(log n)으로 줄어들어 전체 알고리즘의 성능이 향상
  // 제한사항 5번에 따라 두 배열에 중복값은 삭제
  // 여벌 체육복이 있는 학생 얕은 복사 후 잃어버린 학생 목록에 포함되었다면 리스트에 제거 후 정렬
  // 잃어버린 학생 얕은 복사 후 여분 체육복이 있다면 목록에서 제거 후 정렬
  let reserveCopy = [...reserve].filter((item) => !lost.includes(item)).sort();
  let lostCopy = [...lost].filter((item) => !reserve.includes(item)).sort();

  // 잃어버린 학생 또는 체욱복을 잃어버렸지만 여벌이 있어 체육복이 없는 학생이 0이라면 n을 리턴
  if (lostCopy.length === 0) {
    return n;
  }

  // 체육복을 잃어버린 학생을 순회
  let res = lostCopy.map((item) => {
    // 여분 체육복이 있는 학생의 이전, 다음이 item과 일치한다면 reserveCopy를 재할당(빌려준 친구는 이제 여분 체육복이 0개)
    // 체육복을 빌린 학생은 "get"을 리턴
    for (var i = 0; i < reserveCopy.length; i++) {
      if (reserveCopy[i] + 1 === item || reserveCopy[i] - 1 === item) {
        reserveCopy = reserveCopy.filter((item) => item !== reserveCopy[i]);
        return "get";
      }
    }
  });

  // 체육복이 없는 학생 수 : 잃어버린 학생 수 - 체육복을 빌린 학생 수
  let notHavePerson =
    lostCopy.length - res.filter((item) => item === "get").length;

  // 전체 학생 - 체육복이 없는 학생 수
  return n - notHavePerson;
}
